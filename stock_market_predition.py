# -*- coding: utf-8 -*-
"""Stock_Market_Predition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i1UcRsxdWS8b4huf7swDZIJkN6gjtcUg
"""

#Importing all necessary directories.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split
import datetime

#Importing Dataset of past 5 years of AMAZON's stock info.
from google.colab import files
uploaded=files.upload()

df=pd.read_csv('AMAZON_STOCK.csv')
df

#predict stock prices, n days into future
n=30 #the next two weeks
forecast_days=n
plot_days = []
for i in range(n):
    plot_days.append(i)

dataset_days=1318
dataset_days = []
for i in range(1318):
    dataset_days.append(i)

# days=np.array(df[['Date']])[-forecast_out:] #dates to be forecasted
# days

#Adjusted Close Price
df=df[['Adj Close']]
df

#Create another column shifting data in the original dataset to n days up
#This column gives prediction of stock in n days
df['Forecast']=df[['Adj Close']].shift(-forecast_days)
df
#print(df.tail())

#Create the independent dataset Y of close prices
dataset_adj_close=np.array(df[['Adj Close']])
X=dataset_adj_close[:-forecast_days] 
print(X)

#Create the dependent dataset Y of forecast prices
Y=np.array(df['Forecast'])
print(Y)
Y=Y[: -forecast_days] 
print(Y)

#Split data for testing and training
x_train, x_test, y_train,y_test= train_test_split(X,Y,test_size=0.2)

#Create and Train the SVM rbf Model
svr_rbf=SVR(kernel='rbf',C=1e3,gamma=0.01) 
svr_rbf.fit(x_train,y_train)

svm_accuracy=svr_rbf.score(x_test,y_test)
print(svm_accuracy)

#Create and Train SV Linear Regression Model
lr=LinearRegression()
lr.fit(x_train,y_train)

lr_accuracy=lr.score(x_test,y_test)
print(lr_accuracy)

#Forecasting
x_forecast=np.array(df.drop(['Forecast'],1))[-forecast_days:]
x_forecast

svr_forecast=svr_rbf.predict(x_forecast)
svr_forecast
lr_forecast=lr.predict(x_forecast)
lr_forecast

plt.figure(figsize=(7,7))
plt.plot(dataset_days, dataset_adj_close, color = 'black', label='Original Data')
plt.xlabel('Days')
plt.ylabel('Adj Close Price')
plt.title('AMAZON Stock Prices in the last 5 years')
plt.legend()
plt.show()

plt.figure(figsize=(8,8))
plt.plot(plot_days, x_forecast, color = 'black', label='Original Data')
plt.plot(plot_days, svr_forecast, color = 'green', label='RBF Model')
plt.xlabel('Days')
plt.ylabel('Adj Close Price')
plt.title('Support Vector Machine RBF Accuracy ')
plt.legend()
plt.show()

plt.figure(figsize=(8,8))
plt.plot(plot_days, x_forecast, color = 'black', label='Original Data')
plt.plot(plot_days, lr_forecast, color = 'green', label='RBF Model')
plt.xlabel('Days')
plt.ylabel('Adj Close Price')
plt.title('Linear Regression Accuracy ')
plt.legend()
plt.show()